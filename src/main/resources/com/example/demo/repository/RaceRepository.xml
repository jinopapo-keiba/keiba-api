<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.repository.RaceRepository">
    <resultMap id="raceMap" type="com.example.demo.entity.Race">
        <id property="id" column="id"/>
        <result property="raceName" column="raceName"/>
        <result property="stadium" column="stadium"/>
        <result property="round" column="round"/>
        <result property="raceType" column="raceType"/>
        <result property="raceLength" column="raceLength"/>
        <result property="clockwise" column="clockwise"/>
        <result property="raceCondition" column="raceCondition"/>
        <result property="raceWeather" column="raceWeather"/>
        <result property="grade" column="grade"/>
        <result property="oldLimit" column="oldLimit"/>
        <result property="raceDate" column="raceDate"/>
        <result property="horseCount" column="horseCount"/>
        <result property="stadiumDay" column="stadiumDay"/>
        <collection property="raceHorses" ofType="com.example.demo.entity.RaceHorse">
            <id column="id" property="raceId"/>
            <id property="frameNumber" column="frameNumber"/>
            <result property="weight" column="weight"/>
            <result property="handicap" column="handicap"/>
            <result property="old" column="old"/>
            <association javaType="com.example.demo.entity.Horse" property="horse">
                <id property="id" column="horseId"/>
                <result property="name" column="horseName"/>
                <result property="gender" column="horseGender"/>
            </association>
            <association javaType="com.example.demo.entity.Jockey" property="jockey">
                <id property="id" column="jockeyId"/>
                <result property="name" column="jockeyName"/>
            </association>
            <association javaType="com.example.demo.entity.Trainer" property="trainer">
                <id property="id" column="trainerId"/>
                <result property="name" column="trainerName"/>
            </association>
            <association javaType="com.example.demo.entity.RaceResult" property="raceResult">
                <result property="fullTime" column="fullTime"/>
                <result property="ranking" column="ranking"/>
                <result property="cornerRanking" column="cornerRanking"/>
                <result property="popular" column="popular"/>
                <result property="lastRapTime" column="lastRapTime"/>
                <result property="meanFullTime" column="meanFullTime"/>
                <result property="meanLastRapTime" column="meanLastRapTime"/>
                <result property="stdDeviFullTime" column="stdDeviFullTime"/>
                <result property="stdDeviLastRapTime" column="stdDeviLastRapTime"/>
                <result property="meanTargetRaceFullTime" column="meanTargetRaceFullTime"/>
                <result property="meanTargetRaceLastRapTime" column="meanTargetRaceLastRapTime"/>
                <result property="stdDeviTargetRaceFullTime" column="stdDeviTargetRaceFullTime"/>
                <result property="stdDeviTargetRaceLastRapTime" column="stdDeviTargetRaceLastRapTime"/>
            </association>
        </collection>
    </resultMap>

    <resultMap id="deviBaseMap" type="com.example.demo.repository.dto.DeviBase">
        <constructor>
            <arg column="meanFullTime" javaType="java.time.Duration"/>
            <arg column="meanLastRapTime" javaType="java.time.Duration"/>
            <arg column="stdDeviFullTime" javaType="float"/>
            <arg column="stdDeviLastRapTime" javaType="float"/>
        </constructor>
    </resultMap>

    <sql id="targetRaceHorseResultsColumn">
        SELECT
            ${column}
        FROM (
            SELECT
                ${sortColumn}
            FROM
                race
            JOIN
                raceResult
            ON
                race.id = raceResult.raceId
            WHERE
                race.id = subId
            AND
                ranking > 0
            ORDER BY
                ${sortColumn}
            LIMIT 5
        ) ${sortColumn}
    </sql>

    <insert id="saveRace" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO race (
            stadium,
            round,
            raceName,
            raceType,
            raceLength,
            clockwise,
            raceCondition,
            raceWeather,
            grade,
            oldLimit,
            raceDate,
            stadiumDay
        ) VALUES (
            #{race.stadium},
            #{race.round},
            #{race.raceName},
            #{race.raceType.value},
            #{race.raceLength},
            #{race.clockwise.value},
            #{race.raceCondition.value},
            #{race.raceWeather.value},
            #{race.grade.value},
            #{race.oldLimit.value},
            #{race.raceDate},
            #{race.stadiumDay}
        )
    </insert>

    <update id="updateRace">
        UPDATE
            race
        SET
            stadium = #{race.stadium},
            round = #{race.round},
            raceName = #{race.raceName},
            raceType = #{race.raceType.value},
            raceLength = #{race.raceLength},
            clockwise = #{race.clockwise.value},
            raceCondition = #{race.raceCondition.value},
            raceWeather = #{race.raceWeather.value},
            grade = #{race.grade.value},
            oldLimit = #{race.oldLimit.value},
            raceDate = #{race.raceDate},
            stadiumDay = #{race.stadiumDay}
        WHERE
            id = #{race.id}
    </update>

    <select id="fetchDeviBase" resultMap="deviBaseMap">
        SELECT
            avg(minFullTime) as meanFullTime,
            avg(minLastRapTime) as meanLastRapTime,
            stddev_pop(minFullTime) as stdDeviFullTime,
            stddev_pop(minLastRapTime) as stdDeviLastRapTime
        FROM
        (
            SELECT
                min(fullTime) as minFullTime,
                min(lastRapTime) as minLastRapTime
            FROM
                race
            JOIN
                raceResult
            ON
                race.id = raceResult.raceId
            WHERE
                ranking > 0
            AND
                race.raceLength = #{raceLength}
            AND
                race.raceType = #{raceType}
            AND
                race.stadium = #{stadium}
            AND
                race.raceCondition = #{raceCondition}
            GROUP BY race.id
        ) minTime
    </select>

    <select id="fetchRace" resultMap="raceMap">
        SELECT
            raceName,raceType,raceLength,clockwise,raceCondition,raceWeather,grade,oldLimit,raceDate,race.id as id,round,stadium,stadiumDay,
            weight,old,handicap,raceHorse.frameNumber as frameNumber,(select count(*) from race sr join raceHorse srh on sr.id=srh.raceId where sr.id = race.id group by sr.id ) as  horseCount,
            jockey.id as jockeyId,jockey.name as jockeyName,
            trainer.id as trainerId,trainer.name as trainerName,
            horse.id as horseId,horse.name as horseName, gender as horseGender,
            race.id as subId
        <if test="queryParam.beforeRace == false">
            ,fullTime,ranking,cornerRanking,lastRapTime,popular,
            (
            <include refid="targetRaceHorseResultsColumn">
                <property name="column" value="avg(fullTime)"/>
                <property name="sortColumn" value="fullTime"/>
            </include>
            ) as meanTargetRaceFullTime,
            (
            <include refid="targetRaceHorseResultsColumn">
                <property name="column" value="avg(lastRapTime)"/>
                <property name="sortColumn" value="lastRapTime"/>
            </include>
            ) as meanTargetRaceLastRapTime,
            (
            <include refid="targetRaceHorseResultsColumn">
                <property name="column" value="stddev_pop(fullTime)"/>
                <property name="sortColumn" value="fullTime"/>
            </include>
            ) as stdDeviTargetRaceFullTime,
            (
            <include refid="targetRaceHorseResultsColumn">
                <property name="column" value="stddev_pop(lastRapTime)"/>
                <property name="sortColumn" value="lastRapTime"/>
            </include>
            ) as stdDeviTargetRaceLastRapTime
        </if>
        FROM
            race
        JOIN
            raceHorse
        ON
            raceHorse.raceId = race.id
        JOIN
            horse
        ON
            horseId = horse.id
        JOIN
            jockey
        ON
            jockeyId = jockey.id
        JOIN
            trainer
        ON
            trainerId = trainer.id
        <if test="queryParam.beforeRace == false">
            JOIN
                raceResult
            ON
                raceResult.raceId = race.id
            AND
                raceHorse.frameNumber = raceResult.frameNumber
        </if>
        <where>
            <if test="queryParam.raceId != null">
                race.id = #{queryParam.raceId}
            </if>
            <if test="queryParam.stadiums != null and queryParam.stadiums.size &gt; 0">
                AND stadium IN
                <foreach item="stadium" open="(" close=")" collection="queryParam.stadiums" separator=",">
                    #{stadium}
                </foreach>
            </if>
            <if test="queryParam.round != null">
                AND round = #{queryParam.round}
            </if>
            <if test="queryParam.raceDate != null">
                AND raceDate = #{queryParam.raceDate}
            </if>
            <if test="queryParam.startRaceDate != null">
                AND raceDate >= #{queryParam.startRaceDate}
            </if>
            <if test="queryParam.endRaceDate != null">
                AND raceDate &lt; #{queryParam.endRaceDate}
            </if>
            <if test="queryParam.horseIds != null">
                AND
                    horse.id
                IN
                <foreach item="horseId" collection="queryParam.horseIds" open="(" separator="," close=")">
                    #{horseId}
                </foreach>
            </if>
            <if test="queryParam.minRaceLength != null">
                AND
                raceLength &gt;= #{queryParam.minRaceLength}
            </if>
            <if test="queryParam.maxRaceLength != null">
                AND
                raceLength &lt;= #{queryParam.maxRaceLength}
            </if>
        </where>
        ORDER BY
        race.raceDate DESC,
        race.round ASC,
        raceHorse.frameNumber ASC
    </select>
</mapper>
